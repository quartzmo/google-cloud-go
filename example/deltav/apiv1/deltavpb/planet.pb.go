// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/example/deltav/v1/planet.proto

package deltavpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A representation of a planet.
type Planet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the planet.
	// Format: projects/{project}/locations/{location}/planets/{planet_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Planet) Reset() {
	*x = Planet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_example_deltav_v1_planet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Planet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Planet) ProtoMessage() {}

func (x *Planet) ProtoReflect() protoreflect.Message {
	mi := &file_google_example_deltav_v1_planet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Planet.ProtoReflect.Descriptor instead.
func (*Planet) Descriptor() ([]byte, []int) {
	return file_google_example_deltav_v1_planet_proto_rawDescGZIP(), []int{0}
}

func (x *Planet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Fetches a list of planets.
type ListPlanetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of planets.
	// Format: projects/{project}/locations/{location}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of planets to return. The service may return
	// fewer than this value. If unspecified, at most 50 books will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListPlanets` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListPlanets` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPlanetsRequest) Reset() {
	*x = ListPlanetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_example_deltav_v1_planet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanetsRequest) ProtoMessage() {}

func (x *ListPlanetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_example_deltav_v1_planet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanetsRequest.ProtoReflect.Descriptor instead.
func (*ListPlanetsRequest) Descriptor() ([]byte, []int) {
	return file_google_example_deltav_v1_planet_proto_rawDescGZIP(), []int{1}
}

func (x *ListPlanetsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPlanetsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPlanetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response to the ListPlanets RPC.
type ListPlanetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The planets from the specified location.
	Planets []*Planet `protobuf:"bytes,1,rep,name=planets,proto3" json:"planets,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPlanetsResponse) Reset() {
	*x = ListPlanetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_example_deltav_v1_planet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanetsResponse) ProtoMessage() {}

func (x *ListPlanetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_example_deltav_v1_planet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanetsResponse.ProtoReflect.Descriptor instead.
func (*ListPlanetsResponse) Descriptor() ([]byte, []int) {
	return file_google_example_deltav_v1_planet_proto_rawDescGZIP(), []int{2}
}

func (x *ListPlanetsResponse) GetPlanets() []*Planet {
	if x != nil {
		return x.Planets
	}
	return nil
}

func (x *ListPlanetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Fetches a planet.
type GetPlanetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the planet to retrieve.
	// Format: projects/{project}/locations/{location}/planets/{planet_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPlanetRequest) Reset() {
	*x = GetPlanetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_example_deltav_v1_planet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanetRequest) ProtoMessage() {}

func (x *GetPlanetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_example_deltav_v1_planet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanetRequest.ProtoReflect.Descriptor instead.
func (*GetPlanetRequest) Descriptor() ([]byte, []int) {
	return file_google_example_deltav_v1_planet_proto_rawDescGZIP(), []int{3}
}

func (x *GetPlanetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_google_example_deltav_v1_planet_proto protoreflect.FileDescriptor

var file_google_example_deltav_v1_planet_proto_rawDesc = []byte{
	0x0a, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01,
	0x0a, 0x06, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x6c, 0xea, 0x41,
	0x69, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12,
	0x38, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x7d, 0x2a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x73, 0x32, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x12, 0x1c, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x76, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1e, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x76, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x69,
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31, 0x42, 0x0b,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x76, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x70, 0x62,
	0x3b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_google_example_deltav_v1_planet_proto_rawDescOnce sync.Once
	file_google_example_deltav_v1_planet_proto_rawDescData = file_google_example_deltav_v1_planet_proto_rawDesc
)

func file_google_example_deltav_v1_planet_proto_rawDescGZIP() []byte {
	file_google_example_deltav_v1_planet_proto_rawDescOnce.Do(func() {
		file_google_example_deltav_v1_planet_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_example_deltav_v1_planet_proto_rawDescData)
	})
	return file_google_example_deltav_v1_planet_proto_rawDescData
}

var file_google_example_deltav_v1_planet_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_google_example_deltav_v1_planet_proto_goTypes = []any{
	(*Planet)(nil),              // 0: google.example.deltav.v1.Planet
	(*ListPlanetsRequest)(nil),  // 1: google.example.deltav.v1.ListPlanetsRequest
	(*ListPlanetsResponse)(nil), // 2: google.example.deltav.v1.ListPlanetsResponse
	(*GetPlanetRequest)(nil),    // 3: google.example.deltav.v1.GetPlanetRequest
}
var file_google_example_deltav_v1_planet_proto_depIdxs = []int32{
	0, // 0: google.example.deltav.v1.ListPlanetsResponse.planets:type_name -> google.example.deltav.v1.Planet
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_google_example_deltav_v1_planet_proto_init() }
func file_google_example_deltav_v1_planet_proto_init() {
	if File_google_example_deltav_v1_planet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_example_deltav_v1_planet_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Planet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_example_deltav_v1_planet_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListPlanetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_example_deltav_v1_planet_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListPlanetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_example_deltav_v1_planet_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetPlanetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_example_deltav_v1_planet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_example_deltav_v1_planet_proto_goTypes,
		DependencyIndexes: file_google_example_deltav_v1_planet_proto_depIdxs,
		MessageInfos:      file_google_example_deltav_v1_planet_proto_msgTypes,
	}.Build()
	File_google_example_deltav_v1_planet_proto = out.File
	file_google_example_deltav_v1_planet_proto_rawDesc = nil
	file_google_example_deltav_v1_planet_proto_goTypes = nil
	file_google_example_deltav_v1_planet_proto_depIdxs = nil
}
