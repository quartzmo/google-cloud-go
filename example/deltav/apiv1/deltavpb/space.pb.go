// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/example/deltav/v1/space.proto

package deltavpb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_google_example_deltav_v1_space_proto protoreflect.FileDescriptor

var file_google_example_deltav_v1_space_proto_rawDesc = []byte{
	0x0a, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x76, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0xf5, 0x05, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3c, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x12,
	0x95, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x76, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x22, 0x3a, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42,
	0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12,
	0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x7d, 0x2f, 0x6d, 0x6f, 0x6f,
	0x6e, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6f, 0x6e, 0x12, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6f, 0x6e, 0x22, 0x42, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x6f, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x1a, 0x5d, 0xca, 0x41,
	0x18, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2d, 0x70, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x8a, 0xd4, 0xdb, 0xd2, 0x0f, 0x0b,
	0x76, 0x31, 0x5f, 0x32, 0x30, 0x32, 0x33, 0x30, 0x36, 0x30, 0x31, 0x42, 0x68, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x2f, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x76, 0x70, 0x62, 0x3b, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x76, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_google_example_deltav_v1_space_proto_goTypes = []any{
	(*ListPlanetsRequest)(nil),  // 0: google.example.deltav.v1.ListPlanetsRequest
	(*GetPlanetRequest)(nil),    // 1: google.example.deltav.v1.GetPlanetRequest
	(*ListMoonsRequest)(nil),    // 2: google.example.deltav.v1.ListMoonsRequest
	(*GetMoonRequest)(nil),      // 3: google.example.deltav.v1.GetMoonRequest
	(*ListPlanetsResponse)(nil), // 4: google.example.deltav.v1.ListPlanetsResponse
	(*Planet)(nil),              // 5: google.example.deltav.v1.Planet
	(*ListMoonsResponse)(nil),   // 6: google.example.deltav.v1.ListMoonsResponse
	(*Moon)(nil),                // 7: google.example.deltav.v1.Moon
}
var file_google_example_deltav_v1_space_proto_depIdxs = []int32{
	0, // 0: google.example.deltav.v1.SpaceService.ListPlanets:input_type -> google.example.deltav.v1.ListPlanetsRequest
	1, // 1: google.example.deltav.v1.SpaceService.GetPlanet:input_type -> google.example.deltav.v1.GetPlanetRequest
	2, // 2: google.example.deltav.v1.SpaceService.ListMoons:input_type -> google.example.deltav.v1.ListMoonsRequest
	3, // 3: google.example.deltav.v1.SpaceService.GetMoon:input_type -> google.example.deltav.v1.GetMoonRequest
	4, // 4: google.example.deltav.v1.SpaceService.ListPlanets:output_type -> google.example.deltav.v1.ListPlanetsResponse
	5, // 5: google.example.deltav.v1.SpaceService.GetPlanet:output_type -> google.example.deltav.v1.Planet
	6, // 6: google.example.deltav.v1.SpaceService.ListMoons:output_type -> google.example.deltav.v1.ListMoonsResponse
	7, // 7: google.example.deltav.v1.SpaceService.GetMoon:output_type -> google.example.deltav.v1.Moon
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_example_deltav_v1_space_proto_init() }
func file_google_example_deltav_v1_space_proto_init() {
	if File_google_example_deltav_v1_space_proto != nil {
		return
	}
	file_google_example_deltav_v1_moon_proto_init()
	file_google_example_deltav_v1_planet_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_example_deltav_v1_space_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_example_deltav_v1_space_proto_goTypes,
		DependencyIndexes: file_google_example_deltav_v1_space_proto_depIdxs,
	}.Build()
	File_google_example_deltav_v1_space_proto = out.File
	file_google_example_deltav_v1_space_proto_rawDesc = nil
	file_google_example_deltav_v1_space_proto_goTypes = nil
	file_google_example_deltav_v1_space_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpaceServiceClient is the client API for SpaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpaceServiceClient interface {
	// Fetches a list of planets.
	ListPlanets(ctx context.Context, in *ListPlanetsRequest, opts ...grpc.CallOption) (*ListPlanetsResponse, error)
	// Fetches a planet.
	GetPlanet(ctx context.Context, in *GetPlanetRequest, opts ...grpc.CallOption) (*Planet, error)
	// Fetches a list of moons.
	ListMoons(ctx context.Context, in *ListMoonsRequest, opts ...grpc.CallOption) (*ListMoonsResponse, error)
	// Fetches a moon.
	GetMoon(ctx context.Context, in *GetMoonRequest, opts ...grpc.CallOption) (*Moon, error)
}

type spaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpaceServiceClient(cc grpc.ClientConnInterface) SpaceServiceClient {
	return &spaceServiceClient{cc}
}

func (c *spaceServiceClient) ListPlanets(ctx context.Context, in *ListPlanetsRequest, opts ...grpc.CallOption) (*ListPlanetsResponse, error) {
	out := new(ListPlanetsResponse)
	err := c.cc.Invoke(ctx, "/google.example.deltav.v1.SpaceService/ListPlanets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceServiceClient) GetPlanet(ctx context.Context, in *GetPlanetRequest, opts ...grpc.CallOption) (*Planet, error) {
	out := new(Planet)
	err := c.cc.Invoke(ctx, "/google.example.deltav.v1.SpaceService/GetPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceServiceClient) ListMoons(ctx context.Context, in *ListMoonsRequest, opts ...grpc.CallOption) (*ListMoonsResponse, error) {
	out := new(ListMoonsResponse)
	err := c.cc.Invoke(ctx, "/google.example.deltav.v1.SpaceService/ListMoons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spaceServiceClient) GetMoon(ctx context.Context, in *GetMoonRequest, opts ...grpc.CallOption) (*Moon, error) {
	out := new(Moon)
	err := c.cc.Invoke(ctx, "/google.example.deltav.v1.SpaceService/GetMoon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpaceServiceServer is the server API for SpaceService service.
type SpaceServiceServer interface {
	// Fetches a list of planets.
	ListPlanets(context.Context, *ListPlanetsRequest) (*ListPlanetsResponse, error)
	// Fetches a planet.
	GetPlanet(context.Context, *GetPlanetRequest) (*Planet, error)
	// Fetches a list of moons.
	ListMoons(context.Context, *ListMoonsRequest) (*ListMoonsResponse, error)
	// Fetches a moon.
	GetMoon(context.Context, *GetMoonRequest) (*Moon, error)
}

// UnimplementedSpaceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpaceServiceServer struct {
}

func (*UnimplementedSpaceServiceServer) ListPlanets(context.Context, *ListPlanetsRequest) (*ListPlanetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlanets not implemented")
}
func (*UnimplementedSpaceServiceServer) GetPlanet(context.Context, *GetPlanetRequest) (*Planet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanet not implemented")
}
func (*UnimplementedSpaceServiceServer) ListMoons(context.Context, *ListMoonsRequest) (*ListMoonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMoons not implemented")
}
func (*UnimplementedSpaceServiceServer) GetMoon(context.Context, *GetMoonRequest) (*Moon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoon not implemented")
}

func RegisterSpaceServiceServer(s *grpc.Server, srv SpaceServiceServer) {
	s.RegisterService(&_SpaceService_serviceDesc, srv)
}

func _SpaceService_ListPlanets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServiceServer).ListPlanets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.deltav.v1.SpaceService/ListPlanets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServiceServer).ListPlanets(ctx, req.(*ListPlanetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceService_GetPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServiceServer).GetPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.deltav.v1.SpaceService/GetPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServiceServer).GetPlanet(ctx, req.(*GetPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceService_ListMoons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServiceServer).ListMoons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.deltav.v1.SpaceService/ListMoons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServiceServer).ListMoons(ctx, req.(*ListMoonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpaceService_GetMoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpaceServiceServer).GetMoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.example.deltav.v1.SpaceService/GetMoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpaceServiceServer).GetMoon(ctx, req.(*GetMoonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.example.deltav.v1.SpaceService",
	HandlerType: (*SpaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlanets",
			Handler:    _SpaceService_ListPlanets_Handler,
		},
		{
			MethodName: "GetPlanet",
			Handler:    _SpaceService_GetPlanet_Handler,
		},
		{
			MethodName: "ListMoons",
			Handler:    _SpaceService_ListMoons_Handler,
		},
		{
			MethodName: "GetMoon",
			Handler:    _SpaceService_GetMoon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/example/deltav/v1/space.proto",
}
