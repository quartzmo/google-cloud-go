// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.


package deltav

import (
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"

	deltavpb "cloud.google.com/go/example/deltav/apiv1/deltavpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newSpaceClientHook clientHook

// SpaceCallOptions contains the retry settings for each method of SpaceClient.
type SpaceCallOptions struct {
	ListPlanets []gax.CallOption
	GetPlanet []gax.CallOption
	ListMoons []gax.CallOption
	GetMoon []gax.CallOption
}

func defaultSpaceGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("deltav-pa.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("deltav-pa.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("deltav-pa.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://deltav-pa.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
		grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultSpaceCallOptions() *SpaceCallOptions {
	return &SpaceCallOptions{
		ListPlanets: []gax.CallOption{
		},
		GetPlanet: []gax.CallOption{
		},
		ListMoons: []gax.CallOption{
		},
		GetMoon: []gax.CallOption{
		},
	}
}

func defaultSpaceRESTCallOptions() *SpaceCallOptions {
	return &SpaceCallOptions{
		ListPlanets: []gax.CallOption{
		},
		GetPlanet: []gax.CallOption{
		},
		ListMoons: []gax.CallOption{
		},
		GetMoon: []gax.CallOption{
		},
	}
}

// internalSpaceClient is an interface that defines the methods available from Delta V Example API.
type internalSpaceClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListPlanets(context.Context, *deltavpb.ListPlanetsRequest, ...gax.CallOption) *PlanetIterator
	GetPlanet(context.Context, *deltavpb.GetPlanetRequest, ...gax.CallOption) (*deltavpb.Planet, error)
	ListMoons(context.Context, *deltavpb.ListMoonsRequest, ...gax.CallOption) *MoonIterator
	GetMoon(context.Context, *deltavpb.GetMoonRequest, ...gax.CallOption) (*deltavpb.Moon, error)
}

// SpaceClient is a client for interacting with Delta V Example API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A simple toy API that demonstrates versioning pilot.
type SpaceClient struct {
	// The internal transport-dependent client.
	internalClient internalSpaceClient

	// The call options for this service.
	CallOptions *SpaceCallOptions

}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *SpaceClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *SpaceClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *SpaceClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListPlanets fetches a list of planets.
func (c *SpaceClient) ListPlanets(ctx context.Context, req *deltavpb.ListPlanetsRequest, opts ...gax.CallOption) *PlanetIterator {
	return c.internalClient.ListPlanets(ctx, req, opts...)
}

// GetPlanet fetches a planet.
func (c *SpaceClient) GetPlanet(ctx context.Context, req *deltavpb.GetPlanetRequest, opts ...gax.CallOption) (*deltavpb.Planet, error) {
	return c.internalClient.GetPlanet(ctx, req, opts...)
}

// ListMoons fetches a list of moons.
func (c *SpaceClient) ListMoons(ctx context.Context, req *deltavpb.ListMoonsRequest, opts ...gax.CallOption) *MoonIterator {
	return c.internalClient.ListMoons(ctx, req, opts...)
}

// GetMoon fetches a moon.
func (c *SpaceClient) GetMoon(ctx context.Context, req *deltavpb.GetMoonRequest, opts ...gax.CallOption) (*deltavpb.Moon, error) {
	return c.internalClient.GetMoon(ctx, req, opts...)
}

// spaceGRPCClient is a client for interacting with Delta V Example API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type spaceGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing SpaceClient
	CallOptions **SpaceCallOptions

	// The gRPC API client.
	spaceClient deltavpb.SpaceServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewSpaceClient creates a new space service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A simple toy API that demonstrates versioning pilot.
func NewSpaceClient(ctx context.Context, opts ...option.ClientOption) (*SpaceClient, error) {
	clientOpts := defaultSpaceGRPCClientOptions()
	if newSpaceClientHook != nil {
		hookOpts, err := newSpaceClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := SpaceClient{CallOptions: defaultSpaceCallOptions()}

	c := &spaceGRPCClient{
		connPool:    connPool,
		spaceClient: deltavpb.NewSpaceServiceClient(connPool),
		CallOptions: &client.CallOptions,

	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *spaceGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *spaceGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
		"x-goog-api-version", "v1_20230601",
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *spaceGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type spaceRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing SpaceClient
	CallOptions **SpaceCallOptions
}

// NewSpaceRESTClient creates a new space service rest client.
//
// A simple toy API that demonstrates versioning pilot.
func NewSpaceRESTClient(ctx context.Context, opts ...option.ClientOption) (*SpaceClient, error) {
	clientOpts := append(defaultSpaceRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultSpaceRESTCallOptions()
	c := &spaceRESTClient{
		endpoint: endpoint,
		httpClient: httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &SpaceClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultSpaceRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://deltav-pa.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://deltav-pa.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://deltav-pa.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://deltav-pa.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}
// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *spaceRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
		"x-goog-api-version", "v1_20230601",
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *spaceRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *spaceRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *spaceGRPCClient) ListPlanets(ctx context.Context, req *deltavpb.ListPlanetsRequest, opts ...gax.CallOption) *PlanetIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListPlanets[0:len((*c.CallOptions).ListPlanets):len((*c.CallOptions).ListPlanets)], opts...)
	it := &PlanetIterator{}
	req = proto.Clone(req).(*deltavpb.ListPlanetsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*deltavpb.Planet, string, error) {
		resp := &deltavpb.ListPlanetsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.spaceClient.ListPlanets(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetPlanets(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *spaceGRPCClient) GetPlanet(ctx context.Context, req *deltavpb.GetPlanetRequest, opts ...gax.CallOption) (*deltavpb.Planet, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetPlanet[0:len((*c.CallOptions).GetPlanet):len((*c.CallOptions).GetPlanet)], opts...)
	var resp *deltavpb.Planet
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.spaceClient.GetPlanet(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *spaceGRPCClient) ListMoons(ctx context.Context, req *deltavpb.ListMoonsRequest, opts ...gax.CallOption) *MoonIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListMoons[0:len((*c.CallOptions).ListMoons):len((*c.CallOptions).ListMoons)], opts...)
	it := &MoonIterator{}
	req = proto.Clone(req).(*deltavpb.ListMoonsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*deltavpb.Moon, string, error) {
		resp := &deltavpb.ListMoonsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.spaceClient.ListMoons(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetMoons(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *spaceGRPCClient) GetMoon(ctx context.Context, req *deltavpb.GetMoonRequest, opts ...gax.CallOption) (*deltavpb.Moon, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetMoon[0:len((*c.CallOptions).GetMoon):len((*c.CallOptions).GetMoon)], opts...)
	var resp *deltavpb.Moon
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.spaceClient.GetMoon(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ListPlanets fetches a list of planets.
func (c *spaceRESTClient) ListPlanets(ctx context.Context, req *deltavpb.ListPlanetsRequest, opts ...gax.CallOption) *PlanetIterator {
	it := &PlanetIterator{}
	req = proto.Clone(req).(*deltavpb.ListPlanetsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*deltavpb.Planet, string, error) {
		resp := &deltavpb.ListPlanetsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/planets", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil{
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetPlanets(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}
// GetPlanet fetches a planet.
func (c *spaceRESTClient) GetPlanet(ctx context.Context, req *deltavpb.GetPlanetRequest, opts ...gax.CallOption) (*deltavpb.Planet, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetPlanet[0:len((*c.CallOptions).GetPlanet):len((*c.CallOptions).GetPlanet)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &deltavpb.Planet{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil{
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
// ListMoons fetches a list of moons.
func (c *spaceRESTClient) ListMoons(ctx context.Context, req *deltavpb.ListMoonsRequest, opts ...gax.CallOption) *MoonIterator {
	it := &MoonIterator{}
	req = proto.Clone(req).(*deltavpb.ListMoonsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*deltavpb.Moon, string, error) {
		resp := &deltavpb.ListMoonsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/moons", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil{
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetMoons(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}
// GetMoon fetches a moon.
func (c *spaceRESTClient) GetMoon(ctx context.Context, req *deltavpb.GetMoonRequest, opts ...gax.CallOption) (*deltavpb.Moon, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetMoon[0:len((*c.CallOptions).GetMoon):len((*c.CallOptions).GetMoon)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &deltavpb.Moon{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil{
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
